// server.js - Minimal Express + SQLite MVP
require('dotenv').config();
const express = require('express');
const cors = require('cors');
const sqlite3 = require('sqlite3').verbose();
const { v4: uuidv4 } = require('uuid');
const path = require('path');

const app = express();
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

const DB_FILE = process.env.DB_FILE || './database.sqlite';
const db = new sqlite3.Database(DB_FILE, (err) => {
  if (err) console.error('DB open error', err);
  else console.log('DB opened:', DB_FILE);
});

function runAsync(sql, params = []) {
  return new Promise((resolve, reject) => {
    db.run(sql, params, function (err) {
      if (err) reject(err); else resolve(this);
    });
  });
}
function allAsync(sql, params = []) {
  return new Promise((resolve, reject) => {
    db.all(sql, params, (err, rows) => { if (err) reject(err); else resolve(rows); });
  });
}

async function initDB() {
  await runAsync(`CREATE TABLE IF NOT EXISTS users (user_id TEXT PRIMARY KEY, name TEXT, phone TEXT, role TEXT, created_at TEXT)`);
  await runAsync(`CREATE TABLE IF NOT EXISTS providers (provider_id TEXT PRIMARY KEY, user_id TEXT, display_name TEXT, lat REAL, lon REAL, rating_avg REAL, created_at TEXT)`);
  await runAsync(`CREATE TABLE IF NOT EXISTS services (service_id TEXT PRIMARY KEY, code TEXT, display_name TEXT, default_price REAL, default_unit TEXT)`);
  await runAsync(`CREATE TABLE IF NOT EXISTS provider_services (id TEXT PRIMARY KEY, provider_id TEXT, service_id TEXT, base_price REAL, price_unit TEXT, active INTEGER)`);
  await runAsync(`CREATE TABLE IF NOT EXISTS bookings (booking_id TEXT PRIMARY KEY, client_id TEXT, provider_id TEXT, service_id TEXT, scheduled_start TEXT, scheduled_end TEXT, status TEXT, price_charged REAL, created_at TEXT)`);

  const services = await allAsync(`SELECT * FROM services`);
  if (services.length === 0) {
    const s1 = uuidv4(), s2 = uuidv4();
    await runAsync(`INSERT INTO services (service_id, code, display_name, default_price, default_unit) VALUES (?,?,?,?,?)`, [s1, 'cleaning', 'Home Cleaning', 250, 'per_hour']);
    await runAsync(`INSERT INTO services (service_id, code, display_name, default_price, default_unit) VALUES (?,?,?,?,?)`, [s2, 'plumbing', 'Plumbing', 500, 'per_job']);
    console.log('Seeded services');
  }

  const provs = await allAsync(`SELECT * FROM providers`);
  if (provs.length === 0) {
    const p1 = uuidv4(), p2 = uuidv4();
    // sample coordinates (Delhi)
    await runAsync(`INSERT INTO providers (provider_id,user_id,display_name,lat,lon,rating_avg,created_at) VALUES (?,?,?,?,?,?,?)`, [p1, uuidv4(), 'Ramesh - Cleaner', 28.6139, 77.2090, 4.8, new Date().toISOString()]);
    await runAsync(`INSERT INTO providers (provider_id,user_id,display_name,lat,lon,rating_avg,created_at) VALUES (?,?,?,?,?,?,?)`, [p2, uuidv4(), 'Sita - Plumber', 28.7041, 77.1025, 4.6, new Date().toISOString()]);

    const svcCleaning = (await allAsync('SELECT service_id FROM services WHERE code = ?', ['cleaning']))[0].service_id;
    const svcPlumbing = (await allAsync('SELECT service_id FROM services WHERE code = ?', ['plumbing']))[0].service_id;
    await runAsync(`INSERT INTO provider_services (id, provider_id, service_id, base_price, price_unit, active) VALUES (?,?,?,?,?,?)`, [uuidv4(), p1, svcCleaning, 300, 'per_hour', 1]);
    await runAsync(`INSERT INTO provider_services (id, provider_id, service_id, base_price, price_unit, active) VALUES (?,?,?,?,?,?)`, [uuidv4(), p2, svcPlumbing, 600, 'per_job', 1]);
    console.log('Seeded providers');
  }
}

function haversineDistance(lat1, lon1, lat2, lon2) {
  const toRad = (v) => v * Math.PI / 180;
  const R = 6371; // km
  const dLat = toRad(lat2 - lat1);
  const dLon = toRad(lon2 - lon1);
  const a = Math.sin(dLat/2)*Math.sin(dLat/2) + Math.cos(toRad(lat1))*Math.cos(toRad(lat2)) * Math.sin(dLon/2)*Math.sin(dLon/2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
  return R * c;
}

// endpoints
app.get('/services', async (req,res) => {
  const rows = await allAsync('SELECT * FROM services');
  res.json(rows);
});

app.post('/search', async (req,res) => {
  try {
    const { lat, lon, service_id } = req.body;
    if (typeof lat !== 'number' || typeof lon !== 'number' || !service_id) return res.status(400).json({ error: 'lat, lon and service_id required' });
    const rows = await allAsync(`
      SELECT p.provider_id, p.display_name, p.lat, p.lon, p.rating_avg, ps.base_price, ps.price_unit
      FROM providers p JOIN provider_services ps ON p.provider_id = ps.provider_id
      WHERE ps.service_id = ? AND ps.active = 1
    `, [service_id]);

    const enriched = rows.map(r => ({ ...r, distance_km: haversineDistance(lat, lon, r.lat, r.lon) }));
    enriched.sort((a,b) => a.distance_km - b.distance_km);
    res.json(enriched.slice(0, 20));
  } catch (err) { console.error(err); res.status(500).json({ error: 'server error' }); }
});

app.post('/bookings', async (req,res) => {
  try {
    const { client_id, provider_id, service_id, scheduled_start, scheduled_end } = req.body;
    if (!client_id || !provider_id || !service_id || !scheduled_start) return res.status(400).json({ error: 'missing fields' });
    const booking_id = uuidv4();
    await runAsync(`INSERT INTO bookings (booking_id, client_id, provider_id, service_id, scheduled_start, scheduled_end, status, created_at) VALUES (?,?,?,?,?,?,?,?)`,
      [booking_id, client_id, provider_id, service_id, scheduled_start, scheduled_end || null, 'requested', new Date().toISOString()]);
    // TODO: notify provider (push/SMS) â€” done in Phase 2
    res.status(201).json({ booking_id, status: 'requested' });
  } catch (err) { console.error(err); res.status(500).json({ error: 'server error' }); }
});

// simple provider profile
app.get('/providers/:id', async (req,res) => {
  const rows = await allAsync(`SELECT p.*, ps.base_price, ps.price_unit FROM providers p LEFT JOIN provider_services ps ON p.provider_id = ps.provider_id WHERE p.provider_id = ?`, [req.params.id]);
  res.json(rows);
});

const PORT = process.env.PORT || 3000;
initDB().then(() => {
  app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
}).catch(err => console.error('DB init failed', err));
